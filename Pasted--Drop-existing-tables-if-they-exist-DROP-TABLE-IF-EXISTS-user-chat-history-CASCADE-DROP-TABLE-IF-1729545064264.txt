-- Drop existing tables if they exist
DROP TABLE IF EXISTS user_chat_history CASCADE;

DROP TABLE IF EXISTS video_analysis_output CASCADE;

DROP TABLE IF EXISTS users CASCADE;

-- Create extension for vector type
CREATE EXTENSION IF NOT EXISTS vector;

-- Create function if needed
CREATE
OR REPLACE FUNCTION public.postgres (query TEXT) RETURNS void AS $$
BEGIN
    EXECUTE query;
END;
$$ LANGUAGE plpgsql;

-- Create table for users
CREATE TABLE
  public.users (
    id UUID DEFAULT gen_random_uuid () PRIMARY KEY,
    email TEXT NOT NULL UNIQUE, -- Use email as the primary identifier
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
  );

-- Create table for user chat history
CREATE TABLE
  public.user_chat_history (
    id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL,
    message TEXT NOT NULL,
    chat_type TEXT DEFAULT 'text',
    "TIMESTAMP" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP WITH TIME ZONE,
    vector vector (384),
    FOREIGN KEY (user_id) REFERENCES public.users (id) ON DELETE CASCADE,
    CHECK (LENGTH(message) > 0)
  );

CREATE INDEX IF NOT EXISTS user_chat_history_user_id_idx ON public.user_chat_history (user_id);

-- Create table for video analysis output
CREATE TABLE
  public.video_analysis_output (
    id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL,
    upload_file_name TEXT NOT NULL,
    analysis TEXT NOT NULL,
    video_duration TEXT,
    video_format TEXT,
    "TIMESTAMP" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP WITH TIME ZONE,
    vector vector (384),
    FOREIGN KEY (user_id) REFERENCES public.users (id) ON DELETE CASCADE,
    CHECK (LENGTH(upload_file_name) > 0)
  );

CREATE INDEX IF NOT EXISTS video_analysis_output_user_id_idx ON public.video_analysis_output (user_id);

-- Insert a sample user into the users table
INSERT INTO
  public.users (email) -- Insert email only
VALUES
  ('example_user@example.com');

-- Optional: Check if the user was created successfully
SELECT
  *
FROM
  public.users
WHERE
  email = 'example_user@example.com';